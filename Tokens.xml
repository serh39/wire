<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>dns__query_8cpp.html</Path>
    <Anchor>a3c04138a5bfe5d72780bb7e82a18e627</Anchor>
    <DeclaredIn>dns_query.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>tcp_2echo__client_8cpp.html</Path>
    <Anchor>a3c04138a5bfe5d72780bb7e82a18e627</Anchor>
    <DeclaredIn>echo_client.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>udp_2echo__client_8cpp.html</Path>
    <Anchor>a3c04138a5bfe5d72780bb7e82a18e627</Anchor>
    <DeclaredIn>echo_client.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max_datagram_size</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>udp_2echo__client_8cpp.html</Path>
    <Anchor>a43bd87289b8653c58426c24515518454</Anchor>
    <DeclaredIn>echo_client.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>tcp_2echo__server_8cpp.html</Path>
    <Anchor>a3c04138a5bfe5d72780bb7e82a18e627</Anchor>
    <DeclaredIn>echo_server.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>udp_2echo__server_8cpp.html</Path>
    <Anchor>a3c04138a5bfe5d72780bb7e82a18e627</Anchor>
    <DeclaredIn>echo_server.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max_datagram_size</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>udp_2echo__server_8cpp.html</Path>
    <Anchor>a43bd87289b8653c58426c24515518454</Anchor>
    <DeclaredIn>echo_server.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>any</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>ad6fd77e04a5b3840e354cdc246151133</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>any</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>add00a705018fb1f6a7fab0126e1191b5</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>broadcast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>ac7360acf633dd0db43bbf23cfbedd19e</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>broadcast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>ac3916fdb58d5b7ebf874cf86d034a99b</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>a5d97e7b881566d603d7a83385ca9fd4a</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>aa371dd8511614fd42a3032a47610512a</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::dns</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1dns.html</Path>
    <Anchor>a9865fb931761583f36358e078717e085</Anchor>
    <Abstract>Resolve domain name to one or more IP addresses of &amp;#39;protocol&amp;#39; version. </Abstract>
    <DeclaredIn>dns.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dns_category</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a0864273d3817a92dade962c295b4b365</Anchor>
    <Abstract>Obtain reference to static instance of category for DNS errors. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>ad151ad0440241ff7b35b5be03b3c9438</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a00eec80d2f97def15833e1c16417b6ae</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a90ccdc402708b1c2518e787e5ddf0103</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>system_category</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a02b832e1e1fc489db37c8da3ec24e6d2</Anchor>
    <Abstract>Obtain reference to static instance of category for various network and socket errors. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LIBWIRE_DECLARE_FLAGS</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>flags_8hpp.html</Path>
    <Anchor>a5800c3633d946dc846ad172667911c64</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LIBWIRE_DECLARE_FLAGS_OPERATORS</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>flags_8hpp.html</Path>
    <Anchor>ada3c5c406957a75ce45d445d34378d29</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LIBWIRE_EXCEPTIONS_ENABLED_BOOL</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>memory__view_8hpp.html</Path>
    <Anchor>a6bd42bb279133b82145c9f34ae843c55</Anchor>
    <Abstract>Defines memory_view wrapper. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>non_blocking</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>af7acc3d9cae8b6e61da8cf4bea41d91c</Anchor>
    <Abstract>Toggle non-blocking I/O mode on sockets. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>receive_buffer_size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>ad701d028d0b0997fdc01880c45c0f1f3</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>receive_timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>a4d40aae5fc2c803dcc7afd7fe2fb6fe2</Anchor>
    <Abstract>Specify timeout for blocking read operations. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>send_buffer_size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>a6238faa85c36e33f37a73d50967cdb73</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>send_timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>a42c5dbb27e6387a3a8ada97aa15e25c9</Anchor>
    <Abstract>Specify timeout for blocking write operations. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>keep_alive</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a495249a0fbb237b85c4aea524764d7d3</Anchor>
    <Abstract>Enable keep-alive probes on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linger</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a3b1af4895d05e0c59cb92673bcaceea1</Anchor>
    <Abstract>Enable linger on socket.close on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>no_delay</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>adcb1e174ec2434fdabd944ceb377ca86</Anchor>
    <Abstract>Disable the Nagle algorithm on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a7874c2dbaf767ab180fe122e6d685eb4</Anchor>
    <Abstract>Set transmission timeout for TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>todo</Name>
      <APILanguage>unknown</APILanguage>
    </TokenIdentifier>
    <Path>todo.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Abstract>Library namespace, everything in library placed here. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>non_blocking</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>af7acc3d9cae8b6e61da8cf4bea41d91c</Anchor>
    <Abstract>Toggle non-blocking I/O mode on sockets. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>receive_buffer_size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>ad701d028d0b0997fdc01880c45c0f1f3</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>receive_timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>a4d40aae5fc2c803dcc7afd7fe2fb6fe2</Anchor>
    <Abstract>Specify timeout for blocking read operations. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>send_buffer_size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>a6238faa85c36e33f37a73d50967cdb73</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>send_timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>a42c5dbb27e6387a3a8ada97aa15e25c9</Anchor>
    <Abstract>Specify timeout for blocking write operations. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>v4</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>aaac2ed5914ee7680ce2a560d4e38f4daa5ed3a3ff8e5c29979502b9030e8518e0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>v6</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>aaac2ed5914ee7680ce2a560d4e38f4daa0af45c99beb7a9afc9192665c4a05cd3</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tcp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>a303ea9bf9d0c1b3fa4599e51c10dac60ae20bb202b1d5537b1415e3263a37ed78</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>udp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>a303ea9bf9d0c1b3fa4599e51c10dac60a84864c1fe095359bc9c5ac068e24e781</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::address</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Abstract>IPv4/IPv6 address structure. </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>a3fc9e583da88c3917c650ccbc83d86ef</Anchor>
    <Abstract>Construct IP address from raw bytes in network byte order (big endian). </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>ad8a8ab512a46e04fa09a1ae0b7ad7e12</Anchor>
    <Abstract>Construct IPv4 address from 4 bytes in network byte order (big endian). </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>afa7eea4849ff284a66dee5ec8dad73e1</Anchor>
    <Abstract>Construct IPv6 address from 16 bytes in network byte order (big endian). </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>a971a130c5a51dd9837e88e642309ea7e</Anchor>
    <Abstract>Parse IP address from string. </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>ac32ae3f4c82e428bddcdaa4c5684e912</Anchor>
    <Abstract>Parse IP address from string. </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>adc9ec375cf2fb8e1e68beaa652c70c71</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>a5b3321ad85b0a3a49f2f20a577715c6f</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>to_string</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>acea965d98e50a3667bdb9ea225dcc587</Anchor>
    <Abstract>Convert address object to string representation. </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parts</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>aa35a88247785da98c17fd6eff5d2e527</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>version</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>a316ce4d866a74fe1a6a1a8b92afdd4c1</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::flags</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Abstract>Type-safe wrapper for OR-ed flags. </Abstract>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>flags</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>aff14103d8804038fb67fb45941bb3ad3</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>flags</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>aa472b6061e300503b364cd9ede4f3f4c</Anchor>
    <Abstract>Construct Flags from OR-ed flags. </Abstract>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>flags</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a0709c19a2140ecc22ca7f52723c61074</Anchor>
    <Abstract>Construct Flags with a single flag set. </Abstract>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>flags</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>ae758f42fac1e0fa782d52481b7650aad</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a9147d32dea6864c4c19137969d0a0c97</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator Storage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>ad90b403c338da4ff838890f48876c83b</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a51514249810c12d2a832d3eecd183096</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a337b9f8335bdd5db7e5b73d1405d07c7</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a87447ec0b1b5a7d0572e0b55238929c2</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&amp;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a6d022242dbdf0371304133bc3e66ee0d</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&amp;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a5be74ea25781451b940cb6bbab76e76f</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator^</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>aa64810d08b6ab917e4e21018fec2a5a4</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator^</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>ad08a2edf7674e7e38bd51e12d6c63007</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator^=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a03b781b06d5b6742d91960b98bc6b2e3</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator^=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a7e7d29cdaf591ddab06248e3e5e810f5</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator|</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a4b8893e36b2f0af0cd08498a70ee525c</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator|</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a4ee3fc11e5d05071141699f82902a0bb</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator|=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a14d6726d782c053fc1395cc00aeae6fd</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator|=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>af4cc29050bfeb19d8eed7415e810ec21</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator~</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a906bc309f7bc5a8103f235866b330b5d</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::flags</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1flags.html</Path>
    <Anchor>a8b1ab7ee480efdf25b1a30248b8db750</Anchor>
    <DeclaredIn>flags.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::memory_view</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Abstract>Non-owning STL-like wrapper for raw memory. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>const_iterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a2d94bd7a416bd7b949f41bfaec700a30</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>const_pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a7f3e3035b0e88387bb3e7e5144d2acbe</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>const_reference</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a4a42b4192c89f025c4f4ad069b093501</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>const_reverse_iterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>af3ea326309dedabcefa9db53b8184f8d</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difference_type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a22dde081d55c3cc9c270527920acc9a0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>iterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>aa18e7d3db40d89de32e953e89a383541</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a9c80d5e0a4e22c1951d209160506afbc</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reference</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a4f3c1f9434fb0e913f107842d315be5d</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reverse_iterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a6a9bed2e9096aed3df539452fd4cf1e3</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size_type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a79b7f56829b7412fe41314528ad0484a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value_type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>afdc0c45089e15e1971c843a2ee297e76</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memory_view</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>aa969e16bdac79890229c6100c69f47f3</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memory_view</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a84b883f62d1c631e248570c870a06dfe</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>back</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a180a3b1d8d6e799206a76c874a3e8549</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>back</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a046bd85e4de686a29eaed21aa435f33d</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>ab71492dec213b072be7c69e35fd77baf</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a770fb53dcac880c9915c9a896b1bdaf6</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>capacity</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>ad74f7b06fb368839e706eee2e742cb12</Anchor>
    <Abstract>Return size of underlying memory size FROM begin() TO BIGGEST POSSIBLE end(). </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cbegin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a82b54fce440be3f865d1104716fb3053</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cend</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a52389b47efcad7ea8be76c3bc499ad92</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>ab13b95b347a68dfc49da7b03fafc14ab</Anchor>
    <Abstract>Same as resize (0). </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a4fd4a972169e12d1e8686f5fe9a86051</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a99bbab0e6dd9b966f9347560b86fc9d1</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a32d3184171cb00b165947f20e29a6bef</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a4228b7ff44417bae04f1f03ba7f704ac</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>front</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>affdfee0f5cee6557c1d526b6c74e46b5</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>front</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a020e98852024c3bf95e4d787dea80735</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max_size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a4577ad210bdee682aa89b56d79bdb3b5</Anchor>
    <Abstract>Same as capacity. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a786e584fdc67201bac8abdbaad585911</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a5d86ecfcd2fc4a40b96884cd5aa952dd</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a3a43ec6975debc3101b5d20cbe8172ec</Anchor>
    <Abstract>&amp;quot;Hide&amp;quot; X bytes from end of memory so that new_size is left visible. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shrink_back</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a3609d6411d9f08c4af7a0ed30f502435</Anchor>
    <Abstract>&amp;quot;Hide&amp;quot; X bytes from end of memory. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shrink_front</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a597a6afe230b4641551608f2c6968d9d</Anchor>
    <Abstract>&amp;quot;Hide&amp;quot; X bytes from begin of memory. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a463e9bfb8f2f39ee7f33f3e6fda4e2cf</Anchor>
    <Abstract>Currently visible memory size. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>swap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a614293a9b3e1365bf2507c1577d90695</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::non_blocking_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::non_blocking_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1non__blocking__t.html</Path>
    <Abstract>Dummy type for nonblocking option. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::non_blocking_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1non__blocking__t.html</Path>
    <Anchor>aa61f9f7a1a540acf1b1d80fa428f791d</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::non_blocking_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1non__blocking__t.html</Path>
    <Anchor>a25e323f9376bd3c3afa9339457b6ade6</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::receive_buffer_size_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::receive_buffer_size_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1receive__buffer__size__t.html</Path>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::receive_buffer_size_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1receive__buffer__size__t.html</Path>
    <Anchor>a8617ccadfa6f77f26124161c21284381</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::receive_buffer_size_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1receive__buffer__size__t.html</Path>
    <Anchor>aded12a59e81c680ffbe4bbff6d6e5ba8</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::receive_timeout_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::receive_timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1receive__timeout__t.html</Path>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::receive_timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1receive__timeout__t.html</Path>
    <Anchor>a0286dfa2eb53622775a46d1d31d6679d</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::receive_timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1receive__timeout__t.html</Path>
    <Anchor>ab2cf3a5a0f25010d9a0e73cfd96c2e73</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::send_buffer_size_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::send_buffer_size_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1send__buffer__size__t.html</Path>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::send_buffer_size_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1send__buffer__size__t.html</Path>
    <Anchor>ab395cdf58cdf50d06d9df4fa7ca912e2</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::send_buffer_size_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1send__buffer__size__t.html</Path>
    <Anchor>a07fb8a31bf23879b29c919e6492edeb2</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::send_timeout_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::send_timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1send__timeout__t.html</Path>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::send_timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1send__timeout__t.html</Path>
    <Anchor>a00b5aa0ef500e08a6cc1608dbd24ff42</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::send_timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1send__timeout__t.html</Path>
    <Anchor>aff1a3755c41c3f4e22c0cbc05d27ea18</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::dns</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::dns</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1dns.html</Path>
    <Abstract>Namespace with functions for interaction with system DNS resolver. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::dns</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1dns.html</Path>
    <Anchor>a9865fb931761583f36358e078717e085</Anchor>
    <Abstract>Resolve domain name to one or more IP addresses of &amp;#39;protocol&amp;#39; version. </Abstract>
    <DeclaredIn>dns.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::error</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Abstract>Namespace with platform-independent error codes. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dns_category</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a0864273d3817a92dade962c295b4b365</Anchor>
    <Abstract>Obtain reference to static instance of category for DNS errors. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>ad151ad0440241ff7b35b5be03b3c9438</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a00eec80d2f97def15833e1c16417b6ae</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a90ccdc402708b1c2518e787e5ddf0103</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>system_category</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a02b832e1e1fc489db37c8da3ec24e6d2</Anchor>
    <Abstract>Obtain reference to static instance of category for various network and socket errors. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>host_not_found</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a2dfc5d7c9711300330bafb0aca562364aaed2ca7718629fc5c5deadf37963d368</Anchor>
    <Abstract>Requested host doesn&amp;#39;t exists. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>host_not_found_try_again</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a2dfc5d7c9711300330bafb0aca562364aeac0761a9edb259e56d4ff4b7974c4af</Anchor>
    <Abstract>Requested host doesn&amp;#39;t exists, but DNS server answer is non-authoritative. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>no_address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a2dfc5d7c9711300330bafb0aca562364a5f4fb670a228d39e258109d67e40f9b7</Anchor>
    <Abstract>Requested host exists, but does not have any addresses defined. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>no_destination</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a3801d3367d653c60a435b9d67388af2ea5c3deb0b1c9cb1dbd410505ffb039d20</Anchor>
    <Abstract>Failed to connect to destination server. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>no_resources</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a3801d3367d653c60a435b9d67388af2ea8a6a0beb32b7ed784ce0401ad0e128b6</Anchor>
    <Abstract>Out of resources. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>disconnected</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a3801d3367d653c60a435b9d67388af2ea3a561116f0c9675a3c83d21fa365050d</Anchor>
    <Abstract>Disconnected, either forcibly or gracefully. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>success</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa42ed17f7ac40c7ffb7461f53d688af69</Anchor>
    <Abstract>Operation completed successfully. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>unknown</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa70d253c7fe483f97c840ed0b6a94ef28</Anchor>
    <Abstract>Error code not mapped to any other condition. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>unexpected</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa3cf03d66d5b6a7d0042e3de34bfa6772</Anchor>
    <Abstract>Error code that should not occur on normal library operation. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>invalid_argument</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa30d20b3b42ec91cbaa2628d0794c4e05</Anchor>
    <Abstract>Invalid argument passed to function. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>permission_denied</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa42e1243d6e0713a253ba41bb090d68a8</Anchor>
    <Abstract>Access to resource disallowed. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operation_not_permitted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa90ab0b8ee5bda1eff5769cfe3611152e</Anchor>
    <Abstract>Operation disallowed. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>try_again</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa28db2922d87597810d695c276d8e06be</Anchor>
    <Abstract>Underlying implementation reported temporary failure -OR- non-blocking operation would block...</Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>in_progress</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aab10fb090f71b7b2b6284388b355e0622</Anchor>
    <Abstract>Non-blocking operation started, but not completed yet. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>already</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa05cec9b4d03893879baac318656d8edd</Anchor>
    <Abstract>Previous non-blocking operation still running. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>interrupted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa9c73661273807ed13b2548b44840a905</Anchor>
    <Abstract>System call interrupted by signal (POSIX-specific). </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>out_of_memory</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa2ff987e1f916168e67d9202204f0e453</Anchor>
    <Abstract>Operating system out of memory. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process_limit_reached</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa79d8cd72ffa0d68cf3151560b079b390</Anchor>
    <Abstract>Per-process limitation reached. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>system_limit_reached</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa08ba0284ef11087b00fdac837605a1e7</Anchor>
    <Abstract>System-wide limitation reached. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>protocol_not_supported</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aae78534180a5c730bd4ab60f44d41f69e</Anchor>
    <Abstract>Requested protocol is not supported. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>connection_refused</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa902f29f181607ff33e9d5d8833c3cf76</Anchor>
    <Abstract>Reported by tcp::socket::connect to indicate that no service is listening on specified port...</Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>connection_reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa6b059215df7fef5d2e12caa4f4650b96</Anchor>
    <Abstract>RST segment received (TCP). </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>broken_pipe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa222b125b252060e612f0aee060f77c4e</Anchor>
    <Abstract>Destination finished transmission. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shutdown</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa56d4e5d25d25c01ce279c72b3bd7de8d</Anchor>
    <Abstract>Cannot send after transport endpoint shutdown. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>already_in_use</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa91e5d0b63c3837f75af9a7ceb475ba54</Anchor>
    <Abstract>Reported by listener::bind or listen to indicate that port is already used. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address_not_available</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aab5b60cf0c4465fe2a61f22523bea3bee</Anchor>
    <Abstract>Reported by listener::bind to indicate that interface with specified address doesn&amp;#39;t exists or not lo...</Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>connection_aborted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aaa6ecf08ddaca64fcb2bb5cc2fe7f35ec</Anchor>
    <Abstract>A connection has been aborted. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>network_unreachable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa5c7ecb2b507e17b9a35364a910913e26</Anchor>
    <Abstract>Network is unreachable. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>host_down</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa02f8f423aaa0ba61b0b89d06b1c23340</Anchor>
    <Abstract>Host is known to be down. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>host_unreachable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa7f162319b776e2b5598cb7e656f3253d</Anchor>
    <Abstract>Host destination is unreachable. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aaf978e687739b83719491d14637bba2a2</Anchor>
    <Abstract>Timed out while trying to perform operation. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>not_connected</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aadedf1b256e41c2bf14c745dc67bbbe80</Anchor>
    <Abstract>Attempt to use not connected socket. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end_of_file</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa222e5646149af5aed591bf12d18c2287</Anchor>
    <Abstract>Remote side of connection finished transmission. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::ipv4</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Abstract>Namespace with few IPv4 address constants. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>any</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>ad6fd77e04a5b3840e354cdc246151133</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>broadcast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>ac7360acf633dd0db43bbf23cfbedd19e</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>a5d97e7b881566d603d7a83385ca9fd4a</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::ipv6</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Abstract>Namespace with few IPv6 address constants. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>any</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>add00a705018fb1f6a7fab0126e1191b5</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>broadcast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>ac3916fdb58d5b7ebf874cf86d034a99b</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>aa371dd8511614fd42a3032a47610512a</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::tcp</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp.html</Path>
    <Abstract>Namespace with classes which expose access to system TCP implementation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::listener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Abstract>Restricted wrapper for TCP listening socket. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a155e107bf81fc961de6697e9411bb635</Anchor>
    <Abstract>Construct listener object. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a505015b3c69e1458662a71ae3ac9eae8</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a7b991538661265ea25ded732ad7c0411</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>acf3e7d693bacbe05d89cbf0282026036</Anchor>
    <Abstract>Construct listener and start accepting connections. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~listener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a8d606ec08a12698dbebc17d495d84f79</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>accept</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a32c501d7a07b3db7045315bd695b8039</Anchor>
    <Abstract>Accept first connection from listener queue and create socket for it. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>implementation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>ad3ff130b5420892f457d9cd113e7ec2e</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>implementation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>aad7323324d030c66ca56a7d9c3a52b62</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a58773ef15be8c0887836155a3562701e</Anchor>
    <Abstract>Start listening for incoming connections on specified endpoint. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>native_handle</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a60b46fc95b0c287d65cd698aa236a090</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a18061ee2f5baa03872bf3830489a2888</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>ae2fb88c492bdc7019733d0926c05f73f</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>aa738df8e77f01f72e795de574ebc1b08</Anchor>
    <Abstract>Get option value for socket. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a06b9972ac4775707f96051bb76b15ca7</Anchor>
    <Abstract>Set option value for socket. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::socket</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Abstract>Descriptor wrapper for TCP socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>ae115000f7aae5fd19b61b5113e81b730</Anchor>
    <Abstract>Create new socket object. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>aa725c1065f975c9377d1c4b70233c0e1</Anchor>
    <Abstract>Initialize socket from underlying raw handle. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a0a10dc4eb4058263712ae52f0107c9cc</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a367c74544310a82c0adb7b8ec07f6d8d</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a77f2e9c22570fe06775f2ce5c0ef6b06</Anchor>
    <Abstract>Shutdown and then close socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a745c222d189b27e9b6a8b2bd18124012</Anchor>
    <Abstract>Close and destroy underlying socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>connect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a969e5a198ad78570c52ef7fc81c42eab</Anchor>
    <Abstract>Initialize underlying socket and connect to remote endpoint. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>implementation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>ae682e706e7c060b91995c39f364a7061</Anchor>
    <Abstract>Get internal socket object. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>implementation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a85e0b5e47eea2f51e5bbf5ab2767633c</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>is_open</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a592f509cdf417b83ce18b31c43651e76</Anchor>
    <Abstract>Check whether underlying socket is open. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>native_handle</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a0be0e4db838d6633bc93dab6ff942573</Anchor>
    <Abstract>Get native handle/descriptor for socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a4af41e8b31b00b5d6e6e6cc2ff0b292b</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>aa4556ca3b6228498173673d0f7accb75</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shutdown</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a8f0cd2e9bfc6a1956e139b4f07da3a34</Anchor>
    <Abstract>Shutdown reading/writing part of full-duplex connection (or both if read and write is true)...</Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a98f18a8743e96d417dfa8758c5d82bff</Anchor>
    <Abstract>Query socket option value specified by type tag Option. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>ac73be02513cff09fe1c42edbac951890</Anchor>
    <Abstract>Set socket option value specified by type tag Option to value value. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>local_endpoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>ac2a89b41be82647173363828e4e80c80</Anchor>
    <Abstract>Get address and port of local end of connection. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remote_endpoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a37c9f61dadbda93820e58e696202e203</Anchor>
    <Abstract>Get address and port of remote end of connection. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a414e460baf9a50d1fc9ebbb189e9f6a6</Anchor>
    <Abstract>Read up to bytes_count bytes from socket into buffer passed by reference. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a6e9a8a0cc7b2ef74f96aa89e98474903</Anchor>
    <Abstract>Same as overload with Buffer argument but return newly allocated buffer every time. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read_until</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>ad1d0647f964691b35fdda13f77591f43</Anchor>
    <Abstract>Read from socket until until gives byte is found or max_size bytes read. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read_until</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a26bc5e5542e1bd2a4177047d1b9cc6d3</Anchor>
    <Abstract>Same as overload with buffer argument but returns newly allocated buffer every time. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a044712f5b453a5ce7f3aa6e84c3260db</Anchor>
    <Abstract>Write contents of buffer to socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::options</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Abstract>Inline namespace with options applicable for TCP sockets. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>keep_alive</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a495249a0fbb237b85c4aea524764d7d3</Anchor>
    <Abstract>Enable keep-alive probes on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linger</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a3b1af4895d05e0c59cb92673bcaceea1</Anchor>
    <Abstract>Enable linger on socket.close on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>no_delay</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>adcb1e174ec2434fdabd944ceb377ca86</Anchor>
    <Abstract>Disable the Nagle algorithm on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a7874c2dbaf767ab180fe122e6d685eb4</Anchor>
    <Abstract>Set transmission timeout for TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::options::keep_alive_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::options::keep_alive_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1keep__alive__t.html</Path>
    <Abstract>Dummy type for keep_alive option. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::keep_alive_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1keep__alive__t.html</Path>
    <Anchor>ab26d606f079006483b3a4eafeb0b31f5</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::keep_alive_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1keep__alive__t.html</Path>
    <Anchor>a08e95183f4a0bb4a88a77fec1197e96b</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::options::linger_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::options::linger_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1linger__t.html</Path>
    <Abstract>Dummy type for linger option. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::linger_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1linger__t.html</Path>
    <Anchor>a0e0dd7371da3ffac865941e9d9f9a8ac</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::linger_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1linger__t.html</Path>
    <Anchor>af903847313990e79643d5594a8ae2b6d</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::options::no_delay_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::options::no_delay_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1no__delay__t.html</Path>
    <Abstract>Dummy type for no_delay option. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::no_delay_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1no__delay__t.html</Path>
    <Anchor>a4f2612c22a3968f5906cc12a11e472e5</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::no_delay_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1no__delay__t.html</Path>
    <Anchor>a5a51e611f4de2e0be3dc371724852722</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::options::retransmission_timeout_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::options::retransmission_timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1retransmission__timeout__t.html</Path>
    <Abstract>Dummy type for timeout option. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::retransmission_timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1retransmission__timeout__t.html</Path>
    <Anchor>a7f7fa27aba2c0a321e8d3e40ad9fad26</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::retransmission_timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1retransmission__timeout__t.html</Path>
    <Anchor>a0158c287a908f3183b9440e2db9ead06</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::udp</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::udp</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1udp.html</Path>
    <Abstract>Namespace with classes which expose access to system UDP implementation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::udp::socket</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Abstract>Wrapper for UDP socket descriptor. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a5a35dfb78a2d2d8eb3a4492559eabeee</Anchor>
    <Abstract>Create socket handle and allocate UDP socket with specified IP version. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>ae832f62269a94aa57f5f4cb3d8df103c</Anchor>
    <Abstract>Create socket handle without associated socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a2a649cbda3b0cdd2415a220394db40a9</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a6c8d97e286406eb4ab23dec3c7f0951f</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a23045bf20a8a6db915eb7356572fc95c</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>associate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a20befd1743da3a0eb7f1ba29a3b3adb8</Anchor>
    <Abstract>Associate remote endpoint with UDP socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>bind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a1480bac2b044ba7fa078f30db2362a57</Anchor>
    <Abstract>Start accepting datagrams on specified local endpoint. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>bind</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a093c8a5e215ae15669e844d7dc07d87c</Anchor>
    <Abstract>Same as overload with error code argument but will throw std::system_error. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a918ff6bfb7f4255beee808b709d1cb08</Anchor>
    <Abstract>Free underlying socket file descriptor. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>implementation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a2ba3a8333ae58eb8232a62b56b1ea6a6</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>implementation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>ac93f19798f7ad4442d06609d13b0d410</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>local_endpoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a0e99f46f20d8b07119adfb3be371a2f9</Anchor>
    <Abstract>Get endpoint previously passed to bind() or implicitly assigned to socket after write. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>native_handle</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a2717b4ea5aba1670b57588cf5039dd5c</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>open</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a08defa2bac9cd6129da62394a833801f</Anchor>
    <Abstract>Open socket using specified IP protocol version. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>adc21fb1c84acdcf5329bd2008aca1787</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a46e4ba83d96b3eca219defd1a0615300</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a26455f21da8aeb09217ba88c7a4fc689</Anchor>
    <Abstract>Get option value for socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>ae77fa460430552aaf5639116acc4f845</Anchor>
    <Abstract>Read datagram from socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a7dd8e32d2636ca3c10b38b1751347204</Anchor>
    <Abstract>Same as overload with buffer argument but will return newly allocated buffer every time...</Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remote_endpoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a8ba0b648df1fbd5838cced4fdd855baa</Anchor>
    <Abstract>Get endpoint previously passed to associate(). </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>aebb65452b25a11b4e8e37c8d30966350</Anchor>
    <Abstract>Set option value for socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>adf2ef78d8d2a92e7128e3f2f6309754e</Anchor>
    <Abstract>Send datagram to endpoint specified by destination argument or by socket association set using associ...</Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; libwire::address &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; libwire::address &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01libwire_1_1address_01_4.html</Path>
    <Abstract>Hash implementation for address. </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; libwire::address &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01libwire_1_1address_01_4.html</Path>
    <Anchor>a3ae71c616cd2734133cffb88450ae03e</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::is_error_condition_enum&lt; libwire::error::dns_condition &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::is_error_condition_enum&lt; libwire::error::dns_condition &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1is__error__condition__enum_3_01libwire_1_1error_1_1dns__condition_01_4.html</Path>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::is_error_condition_enum&lt; libwire::error::generic &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::is_error_condition_enum&lt; libwire::error::generic &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1is__error__condition__enum_3_01libwire_1_1error_1_1generic_01_4.html</Path>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::is_error_condition_enum&lt; libwire::error::system_condition &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::is_error_condition_enum&lt; libwire::error::system_condition &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1is__error__condition__enum_3_01libwire_1_1error_1_1system__condition_01_4.html</Path>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
</Tokens>
